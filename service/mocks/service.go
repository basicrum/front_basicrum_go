// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	reflect "reflect"

	types "github.com/basicrum/front_basicrum_go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// DeleteHostname mocks base method.
func (m *MockIService) DeleteHostname(hostname, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHostname", hostname, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHostname indicates an expected call of DeleteHostname.
func (mr *MockIServiceMockRecorder) DeleteHostname(hostname, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostname", reflect.TypeOf((*MockIService)(nil).DeleteHostname), hostname, username)
}

// RegisterHostname mocks base method.
func (m *MockIService) RegisterHostname(hostname, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHostname", hostname, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHostname indicates an expected call of RegisterHostname.
func (mr *MockIServiceMockRecorder) RegisterHostname(hostname, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHostname", reflect.TypeOf((*MockIService)(nil).RegisterHostname), hostname, username)
}

// Run mocks base method.
func (m *MockIService) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockIServiceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIService)(nil).Run))
}

// SaveAsync mocks base method.
func (m *MockIService) SaveAsync(event *types.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveAsync", event)
}

// SaveAsync indicates an expected call of SaveAsync.
func (mr *MockIServiceMockRecorder) SaveAsync(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAsync", reflect.TypeOf((*MockIService)(nil).SaveAsync), event)
}
