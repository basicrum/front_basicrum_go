// Code generated by MockGen. DO NOT EDIT.
// Source: rum_event_factory.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	reflect "reflect"

	beacon "github.com/basicrum/front_basicrum_go/beacon"
	types "github.com/basicrum/front_basicrum_go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIRumEventFactory is a mock of IRumEventFactory interface.
type MockIRumEventFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIRumEventFactoryMockRecorder
}

// MockIRumEventFactoryMockRecorder is the mock recorder for MockIRumEventFactory.
type MockIRumEventFactoryMockRecorder struct {
	mock *MockIRumEventFactory
}

// NewMockIRumEventFactory creates a new mock instance.
func NewMockIRumEventFactory(ctrl *gomock.Controller) *MockIRumEventFactory {
	mock := &MockIRumEventFactory{ctrl: ctrl}
	mock.recorder = &MockIRumEventFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRumEventFactory) EXPECT() *MockIRumEventFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRumEventFactory) Create(event *types.Event) beacon.RumEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", event)
	ret0, _ := ret[0].(beacon.RumEvent)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRumEventFactoryMockRecorder) Create(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRumEventFactory)(nil).Create), event)
}
